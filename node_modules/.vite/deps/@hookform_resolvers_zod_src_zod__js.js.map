{
  "version": 3,
  "sources": ["../../@hookform/resolvers/src/validateFieldsNatively.ts", "../../@hookform/resolvers/src/toNestErrors.ts", "../../@hookform/resolvers/zod/src/zod.ts"],
  "sourcesContent": ["import {\n  get,\n  FieldError,\n  ResolverOptions,\n  Ref,\n  FieldErrors,\n  FieldValues,\n} from 'react-hook-form';\n\nconst setCustomValidity = (\n  ref: Ref,\n  fieldPath: string,\n  errors: FieldErrors,\n) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors);\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) =>\n        setCustomValidity(ref, fieldPath, errors),\n      );\n    }\n  }\n};\n", "import {\n  set,\n  get,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n  FieldValues,\n  InternalFieldName,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestErrors = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n    const error = Object.assign(errors[path] || {}, {\n      ref: field && field.ref,\n    });\n\n    if (isNameInFieldArray(options.names || Object.keys(errors), path)) {\n      const fieldArrayErrors = Object.assign(\n        {},\n        compact(get(fieldErrors, path)),\n      );\n\n      set(fieldArrayErrors, 'root', error);\n      set(fieldErrors, path, fieldArrayErrors);\n    } else {\n      set(fieldErrors, path, error);\n    }\n  }\n\n  return fieldErrors;\n};\n\nconst compact = <TValue>(value: TValue[]) =>\n  Array.isArray(value) ? value.filter(Boolean) : [];\n\nconst isNameInFieldArray = (\n  names: InternalFieldName[],\n  name: InternalFieldName,\n) => names.some((n) => n.startsWith(name + '.'));\n", "import { appendErrors, FieldError, FieldErrors } from 'react-hook-form';\nimport { z, ZodError } from 'zod';\nimport { toNestErrors, validateFieldsNatively } from '@hookform/resolvers';\nimport type { Resolver } from './types';\n\nconst isZodError = (error: any): error is ZodError => error.errors != null;\n\nconst parseErrorSchema = (\n  zodErrors: z.ZodIssue[],\n  validateAllFieldCriteria: boolean,\n) => {\n  const errors: Record<string, FieldError> = {};\n  for (; zodErrors.length; ) {\n    const error = zodErrors[0];\n    const { code, message, path } = error;\n    const _path = path.join('.');\n\n    if (!errors[_path]) {\n      if ('unionErrors' in error) {\n        const unionError = error.unionErrors[0].errors[0];\n\n        errors[_path] = {\n          message: unionError.message,\n          type: unionError.code,\n        };\n      } else {\n        errors[_path] = { message, type: code };\n      }\n    }\n\n    if ('unionErrors' in error) {\n      error.unionErrors.forEach((unionError) =>\n        unionError.errors.forEach((e) => zodErrors.push(e)),\n      );\n    }\n\n    if (validateAllFieldCriteria) {\n      const types = errors[_path].types;\n      const messages = types && types[error.code];\n\n      errors[_path] = appendErrors(\n        _path,\n        validateAllFieldCriteria,\n        errors,\n        code,\n        messages\n          ? ([] as string[]).concat(messages as string[], error.message)\n          : error.message,\n      ) as FieldError;\n    }\n\n    zodErrors.shift();\n  }\n\n  return errors;\n};\n\nexport const zodResolver: Resolver =\n  (schema, schemaOptions, resolverOptions = {}) =>\n  async (values, _, options) => {\n    try {\n      const data = await schema[\n        resolverOptions.mode === 'sync' ? 'parse' : 'parseAsync'\n      ](values, schemaOptions);\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        errors: {} as FieldErrors,\n        values: resolverOptions.raw ? values : data,\n      };\n    } catch (error: any) {\n      if (isZodError(error)) {\n        return {\n          values: {},\n          errors: toNestErrors(\n            parseErrorSchema(\n              error.errors,\n              !options.shouldUseNativeValidation &&\n                options.criteriaMode === 'all',\n            ),\n            options,\n          ),\n        };\n      }\n\n      throw error;\n    }\n  };\n"],
  "mappings": "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",
  "names": ["setCustomValidity", "ref", "fieldPath", "errors", "error", "get", "message", "reportValidity", "validateFieldsNatively", "options", "_loop", "field", "fields", "refs", "forEach", "toNestErrors", "shouldUseNativeValidation", "fieldErrors", "path", "Object", "assign", "isNameInFieldArray", "names", "keys", "fieldArrayErrors", "compact", "set", "value", "Array", "isArray", "filter", "Boolean", "name", "some", "n", "startsWith"]
}
